# -*- coding: utf-8 -*-
import json
from openai.error import APIError
from translatepy.translators.google import GoogleTranslate
from datetime import datetime
import telebot
import openai
from apikey import apikeys

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

summ = 300
bot = telebot.TeleBot("5734414480:AAFai7zkBrThR7l89OTLRkosc7lO5FqJivo")
model_id = 'gpt-3.5-turbo'
autorizeaccount = 0  # —Å—á—ë—Ç—á–∏–∫

try:
    # –±–∞–∑–∞ –Ω–∞ JSON
    data = {}  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    date = {}  # –¥–∞—Ç–∞


    def update_data():
        global data
        try:
            with open('db.json', 'r', encoding='utf-8') as file:  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                d1 = json.load(file)
                data.update(d1)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        except json.decoder.JSONDecodeError:
            pass


    def write_data():
        open('db.json', 'w').close()
        with open('db.json', 'w', encoding='utf-8') as file:  # –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ txt —Ñ–∞–π–ª
            json.dump(data, file, indent=3, ensure_ascii=False)


    def addInDb(message):
        update_data()
        if str(message.from_user.id) in data.keys():
            pass
        else:
            data[str(message.from_user.id)] = {"id": message.from_user.id, "nick": message.from_user.username,
                                               "—Å–∏–º–≤–æ–ª—ã": 5000, "last message": "", "translate": False,
                                               "premium": False, "–æ–ø–ª–∞—Ç–∞": "", "–¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã": "", "admin": False,
                                               "adminpoints": ""}
        write_data()


    def update_date():
        global data
        try:
            with open('date.json', 'r', encoding='utf-8') as file:  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                d1 = json.load(file)
                date.update(d1)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        except json.decoder.JSONDecodeError:
            pass


    def write_date():
        open('date.json', 'w').close()
        with open('date.json', 'w', encoding='utf-8') as file:  # –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ txt —Ñ–∞–π–ª
            json.dump(date, file, indent=3, ensure_ascii=False)


    ###############

    def UpdateSymbolAll():
        update_date()
        if ((datetime.strptime(datetime.now().strftime('%Y-%m-%d'), '%Y-%m-%d') - datetime.strptime(date["date"],
                                                                                                    '%Y-%m-%d')).days >= 1):
            update_data()
            for key in data:
                update_data()
                data[key]["—Å–∏–º–≤–æ–ª—ã"] = 5000
                write_data()
            update_date()
            date["date"] = datetime.now().strftime('%Y-%m-%d')
            write_date()
            print("–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")


    def GenerateLinkPay(message):
        payment_link = ""
        update_data()
        data[str(message.from_user.id)]["–æ–ø–ª–∞—Ç–∞"] = payment_link
        write_data()
        return payment_link


    def murkup_menu():
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data=f"help"),
                   InlineKeyboardButton("üàö –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", callback_data=f"translate"),
                   # InlineKeyboardButton("üó£Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data=f""),
                   InlineKeyboardButton("üí¥ Premium", callback_data=f"premium"),
                   InlineKeyboardButton("‚òéÔ∏èContact With Support", url='https://t.me/andryhalyvaa')
                   )
        return markup


    def murkup_pay():
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay"),
                   # InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_pay"),
                   InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f"back")
                   )
        return markup


    def murkup_translate():
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å", callback_data=f"translate_on"),
                   InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å", callback_data=f"translate_off"),
                   InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f"back")
                   )
        return markup


    def Translate_SetStatus(message, status):
        update_data()
        data[str(message.from_user.id)]["translate"] = status
        write_data()


    def TranslatorText(text, lang):
        translator = GoogleTranslate()
        result = translator.translate(text, lang)
        return result.result


    def InfoAccount(message):
        update_data()
        translate = ""
        premium = ""
        if (data[str(message.from_user.id)]["translate"]):
            translate = "‚úÖ –í–∫–ª—é—á–µ–Ω"
        else:
            translate = "‚ùóÔ∏è–í—ã–∫–ª—é—á–µ–Ω‚ùóÔ∏è"

        if (data[str(message.from_user.id)]["premium"]):
            premium = "üíé–ü—Ä–µ–º–∏—É–ºüíé"
            dataoffprem = 30 - (datetime.strptime(datetime.now().strftime('%Y-%m-%d'), '%Y-%m-%d') - datetime.strptime(
                data[str(message.from_user.id)]["–¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã"], '%Y-%m-%d')).days
            return f'üîπ–ë–∞–ª–∞–Ω—Å: {data[str(message.from_user.id)]["—Å–∏–º–≤–æ–ª—ã"]}\nüîπ–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: {translate}\nüîπPremium: {premium}\nüìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {dataoffprem} –¥–Ω—è(–π)\nüîπ–Ø–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å: {model_id}'
        else:
            premium = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            return f'üîπ–ë–∞–ª–∞–Ω—Å: {data[str(message.from_user.id)]["—Å–∏–º–≤–æ–ª—ã"]}\nüîπ–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: {translate}\nüîπPremium: {premium}\nüîπ–Ø–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å: {model_id}'


    ################
    text_pay = "üíé–ü—Ä–µ–º–∏—É–ºüíé\n-–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –æ–±—ä–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –º–µ—Å—è—Ü\n-–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã\n-–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏\n–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 40 –º–∏–Ω—É—Ç."
    text_noSymbols = "üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤\nüÜì –í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ª–∏–º–∏—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: 5000 —Å–∏–º–≤–æ–ª–æ–≤\n‚úÖ –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ? –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ üíé–ü—Ä–µ–º–∏—É–ºüíé, –ø–æ–¥—Ä–æ–±–Ω–µ–µ /pay"
    text_paylink = "üí∞–ü—Ä–µ–º–∏—É–º —Å—Ç–æ–∏—Ç 250 —Ä—É–±–ª–µ–π –Ω–∞ 30 –¥–Ω–µ–π, –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –°–±–µ—Ä: 4276320016315088 –∏–ª–∏ –ö–∏–≤–∏: +79125725880. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–∫–∏–Ω—å—Ç–µ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –º–Ω–µ –ø–æ –∞–¥—Ä–µ—Å—É: @andryhalyvaa"
    text_manual = '''
    –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∏—á–Ω—ã—Ö –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç ChatGPT —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø—Ä–æ—Å—Ç—ã–º —Å–æ–≤–µ—Ç–∞–º:

    –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —á–µ—Ç–∫–æ –∏ —è—Å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç ChatGPT –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç.

    –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ —Ç–æ—á–Ω—ã–º. –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å, —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏–ª–∏ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å.

    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å ChatGPT –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∏—â–µ—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, —Ç–µ—Ä–º–∏–Ω –∏–ª–∏ —Ñ—Ä–∞–∑–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.

    –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é —Å–ª–µ–¥—É–µ—Ç —É—á–µ—Å—Ç—å –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, —É–∫–∞–∂–∏—Ç–µ –µ–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ.

    –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∑–∞–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —Ä–∞–∑–±–µ–π—Ç–µ –∏—Ö –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç ChatGPT —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º –≤–æ–ø—Ä–æ—Å–µ –∏ –¥–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.

    –ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ, –∑–∞–¥–∞–≤–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. ChatGPT –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç.

    –ù–∞–∫–æ–Ω–µ—Ü, –±—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã –≤ —Å–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö. ChatGPT - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º, –∏ –º—ã –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–µ–º—É —Å —É–≤–∞–∂–µ–Ω–∏–µ–º.

    '''


    ##########

    def GetIdByUserNick(message, user_name):
        user_id = 0
        update_data()
        for key in data:
            if data[key]["nick"] == user_name:
                return data[key]["id"]
        send_message(message, "‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–æ—Ç–µ")
        return 0


    def ChatGPT(message):
        global autorizeaccount
        if len(apikeys) == 0:
            for key in data:
                if data[key]["admin"]:
                    bot.send_message(data[key]["id"],
                                     "üÜô –í–Ω–∏–º–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–ª—é—á–∏ OpenAI!!! —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º @rincoder")
            return "üö∏ –í–µ–¥—É—Ç—å—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"

        elif len(apikeys) == autorizeaccount:
            autorizeaccount = 0
        try:
            openai.api_key = apikeys[autorizeaccount]
            print(f"{autorizeaccount} | {apikeys[autorizeaccount]}")
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",  # The name of the OpenAI chatbot model to use
                messages=[{"role": "user", "content": message}],
                # The conversation history up to this point, as a list of dictionaries
                max_tokens=3800,  # The maximum number of tokens (words or subwords) in the generated response
                stop=None,  # The stopping sequence for the generated response, if any (not used here)
                temperature=0.7,  # The "creativity" of the generated response (higher temperature = more creative)
            )
            autorizeaccount += 1
            return response["choices"][0]["message"]["content"]
        except APIError as e:
            try:
                if e.status_code == 429:
                    del apikeys[autorizeaccount]
                    return "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ OpenAI, –≤–æ–º–∑–æ–∂–Ω–æ —Å–µ–π—á–∞—Å –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                else:
                    bot.send_message(5438856320, f"‚¨õ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ, —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n\n{e}")
            except Exception as e:
                bot.send_message(5438856320, f"‚¨õ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ, —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n\n{e}")


    def send_message(message, text):
        bot.send_message(message.from_user.id, text)


    def send_message_reply(message, text, markup):
        bot.send_message(message.from_user.id, text, reply_markup=markup)


    @bot.message_handler(commands=["start"])
    def start_command_handler(message):
        UpdateSymbolAll()
        send_message(message, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')
        addInDb(message)
        send_message(message,
                     f'ChatGPT - –≠—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ü–µ–ª–µ–π: –æ–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫—É—Ä—Å–æ–≤–æ–π –∏–ª–∏ —Å–æ—á–∏–Ω–µ–Ω–∏—è, –Ω–∞–ø–∏—à–µ—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –í–∞—Å –≤–æ–ø—Ä–æ—Å—ã.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /menu —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
        update_data()
        data[str(message.from_user.id)]["last message"] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        write_data()


    # –ú–µ–Ω—é
    @bot.message_handler(commands=["menu"])
    def menu_command_handler(message):
        addInDb(message)
        UpdateSymbolAll()
        send_message_reply(message, InfoAccount(message), murkup_menu())


    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    @bot.callback_query_handler(func=lambda call: True)  # —Ä–∞–±–æ—Ç–∞ –Ω–∞ –æ—Ç–≤–µ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    def callback_query(call):
        addInDb(call)
        UpdateSymbolAll()
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f"back"))
        if call.data == "help":
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f"–ü–æ–ª–Ω—ã–π –º–∞–Ω—É–∞–ª –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è chatGPT: {text_manual}",
                                  reply_markup=markup)
        elif call.data == "translate":
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–ü–µ—Ä–µ–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω: –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∞ –æ—Ç–≤–µ—Ç –Ω–∞ —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞.\n(–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –º–æ–Ω–µ—Ç, –Ω–∞–∏–ª—É—á—à–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞, –Ω–∞–∏–≤—ã—Å—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞, –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞)\n\n–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): –Ω–∏ –∑–∞–ø—Ä–æ—Å, –Ω–∏ –æ—Ç–≤–µ—Ç –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è.\n(–í—ã—Å–æ–∫–∏–π —Ä–∞—Å—Ö–æ–¥ –º–æ–Ω–µ—Ç, –º–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∏—Ñ–º—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω/–Ω–∞–∑–≤–∞–Ω–∏–π —è–∑—ã–∫–∞ –∑–∞–ø—Ä–æ—Å–∞)",
                                  reply_markup=murkup_translate())
        elif call.data == "premium":
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text_pay,
                                  reply_markup=murkup_pay())
        elif call.data == "translate_on":
            Translate_SetStatus(call, True)
            bot.answer_callback_query(call.id, text="–ü–µ—Ä–µ–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω")
        elif call.data == "translate_off":
            Translate_SetStatus(call, False)
            bot.answer_callback_query(call.id, text="–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω")
        elif call.data == "pay":
            send_message(call, text_paylink)

        elif call.data == "back":
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=InfoAccount(call), reply_markup=murkup_menu())


    @bot.message_handler(commands=["manual"])
    def manual_command_handler(message):
        addInDb(message)
        UpdateSymbolAll()
        send_message(message, f'–ü–æ–ª–Ω—ã–π –º–∞–Ω—É–∞–ª –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è chatGPT: ')


    @bot.message_handler(commands=["balance"])
    def manual_command_handler(message):
        addInDb(message)
        update_data()
        UpdateSymbolAll()
        send_message(message,
                     f'–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {data[str(message.from_user.id)]["—Å–∏–º–≤–æ–ª—ã"]} –º–æ–Ω–µ—Ç. –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ –ø–æ–ª–Ω–æ—á—å.\n\nYour balance is {data[str(message.from_user.id)]["—Å–∏–º–≤–æ–ª—ã"]} coins. The balance is updated daily at midnight')


    @bot.message_handler(commands=["pay"])
    def payMessage(message):
        addInDb(message)
        send_message_reply(message, text_pay, murkup_pay())


    @bot.message_handler(commands=["ahelp"])
    def ahelp(message):
        addInDb(message)
        update_data()
        UpdateSymbolAll()
        if data[str(message.from_user.id)]["admin"]:
            send_message(message,
                         "üíé–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥üíé\n/ahelp - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥\n/addadmin @–∏–º—è–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞\n/astats @–∏–º—è–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/all —Ç–µ–∫—Å—Ç—Å–æ–æ–±—â–µ–Ω–∏—è - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n/addbalance @–∏–º—è–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª-–≤–æ - –≤—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/addprem @–∏–º—è–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤—ã–¥–∞—á–∞ –ø—Ä–µ–º–∏—É–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/ainfo - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


    @bot.message_handler(content_types=['text'])
    def Chats(message):
        UpdateSymbolAll()
        bot.send_chat_action(message.chat.id, 'typing')
        update_data()
        addInDb(message)
        if str(message.from_user.id) in data.keys():
            if data[str(message.from_user.id)]["admin"] and message.text[:2] == "/a":
                try:
                    command = message.text.replace("@", "").split()
                    if command[0] == "/addadmin" and GetIdByUserNick(message, command[1]) != 0:
                        update_data()
                        data[str(GetIdByUserNick(message, command[1]))]["admin"] = True
                        write_data()
                        send_message(message, f"üÖ∞Ô∏è @{command[1]} —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                    elif command[0] == "/astats":
                        update_data()
                        id = str(GetIdByUserNick(message, command[1]))
                        send_message(message,
                                     f"----–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è----\n‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{data[id]['nick']}\nüî¢ –°–∏–º–≤–æ–ª—ã: {data[id]['—Å–∏–º–≤–æ–ª—ã']}\nüàö –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: {data[id]['translate']}\nüíé –ü—Ä–µ–º–∏—É–º: {data[id]['premium']}\nüîó –°—Å—ã–ª–∫–∞ –æ–ø–ª–∞—Ç—ã: {data[id]['–æ–ø–ª–∞—Ç–∞']}\nüìÖ –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {data[id]['–¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã']}\nüÖ∞Ô∏è –ê–¥–º–∏–Ω–∫–∞: {data[id]['admin']}\n")
                    elif command[0] == "/all" and len(command[1]) > 0:
                        texts = message.text[4:]
                        update_data()
                        try:
                            for key in data:
                                bot.send_message(key, texts)
                        except:
                            pass
                        send_message(message, "üîî –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                    elif command[0] == "/addbalance":
                        update_data()
                        data[str(GetIdByUserNick(message, command[1]))]["—Å–∏–º–≤–æ–ª—ã"] = \
                        data[str(GetIdByUserNick(message, command[1]))]["—Å–∏–º–≤–æ–ª—ã"] + int(command[2])
                        write_data()
                        send_message(message, f"üí∞ –°–∏–º–≤–æ–ª—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @{command[1]}")
                    elif command[0] == "/addprem":
                        update_data()
                        id = str(GetIdByUserNick(message, command[1]))
                        data[id]["premium"] = True
                        data[id]["–¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã"] = datetime.now().strftime('%Y-%m-%d')
                        data[id]["–æ–ø–ª–∞—Ç–∞"] = f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{message.from_user.username}"
                        write_data()
                        send_message(message, f"üíé –ü—Ä–µ–º–∏—É–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @{command[1]}")
                        bot.send_message(id,
                                         f"üîî –í–∞–º –≤—ã–¥–∞–Ω —Å—Ç–∞—Ç—É—Å üíé–ü—Ä–µ–º–∏—É–ºüíé –Ω–∞ 30 –¥–Ω–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{message.from_user.username}")
                    elif command[0] == "/ainfo":
                        update_data()
                        keys = data.keys()
                        send_message(message, f"üöπ –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(keys)}")
                except Exception as e:
                    send_message(message, f"‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n{e}")
            else:
                addInDb(message)
                update_data()
                print(f'{data[str(message.from_user.id)]["last message"]}')
                if data[str(message.from_user.id)]["last message"] != "" and ((datetime.strptime(datetime.now().strftime('%Y-%m-%d %H:%M:%S'),'%Y-%m-%d %H:%M:%S') - datetime.strptime(data[str(message.from_user.id)]["last message"], '%Y-%m-%d %H:%M:%S')).seconds >= 10 or (datetime.strptime(datetime.now().strftime('%Y-%m-%d %H:%M:%S'),'%Y-%m-%d %H:%M:%S') - datetime.strptime(data[str(message.from_user.id)]["last message"],'%Y-%m-%d %H:%M:%S')).seconds >= 5):
                    if data[str(message.from_user.id)]["premium"] and (data[str(message.from_user.id)]["–æ–ø–ª–∞—Ç–∞"] != "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" and data[str(message.from_user.id)]["–æ–ø–ª–∞—Ç–∞"] != "" and data[str(message.from_user.id)]["premium"] and data[str(message.from_user.id)]["–¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã"] != "" and (datetime.strptime(datetime.now().strftime('%Y-%m-%d'),'%Y-%m-%d') - datetime.strptime(data[str(message.from_user.id)]["–¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã"], '%Y-%m-%d')).days >= 30):
                        data[str(message.from_user.id)]["premium"] = False
                        data[str(message.from_user.id)]["–æ–ø–ª–∞—Ç–∞"] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                        write_data()
                        send_message(message,"üÜì –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è Premium, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\nüíé –ò–ª–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ üíéPremiumüíé /pay")
                    if (data[str(message.from_user.id)]["translate"]):
                        eng = TranslatorText(message.text, "en")
                        update_data()
                        bot.send_chat_action(message.chat.id, 'typing')
                        if (data[str(message.from_user.id)]["—Å–∏–º–≤–æ–ª—ã"] - len(eng) >= 0 or
                                data[str(message.from_user.id)]["premium"]):
                            chatGPT = (ChatGPT(eng))
                            ru = TranslatorText(chatGPT, 'ru')
                            bot.send_chat_action(message.chat.id, 'typing')
                            send_message(message, ru)
                            update_data()
                            data[str(message.from_user.id)]["—Å–∏–º–≤–æ–ª—ã"] = data[str(message.from_user.id)][
                                                                             "—Å–∏–º–≤–æ–ª—ã"] - len(eng)
                            write_data()
                        else:
                            send_message(message, text_noSymbols)
                    else:
                        bot.send_chat_action(message.chat.id, 'typing')
                        update_data()
                        if (data[str(message.from_user.id)]["—Å–∏–º–≤–æ–ª—ã"] - len(message.text) >= 0 or
                                data[str(message.from_user.id)]["premium"]):
                            send_message(message, ChatGPT(message.text))
                            update_data()
                            bot.send_chat_action(message.chat.id, 'typing')
                            data[str(message.from_user.id)]["—Å–∏–º–≤–æ–ª—ã"] = data[str(message.from_user.id)]["—Å–∏–º–≤–æ–ª—ã"] - len(message.text)
                            write_data()
                        else:
                            send_message(message, text_noSymbols)
                    update_data()
                    data[str(message.from_user.id)]["last message"] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    write_data()
                else:
                    addInDb(message)
                    update_data()
                    if data[str(message.from_user.id)]["last message"] != "":
                        if data[str(message.from_user.id)]["premium"]:
                            send_message(message,f"‚åö –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {5 - ((datetime.strptime(datetime.now().strftime('%Y-%m-%d %H:%M:%S'), '%Y-%m-%d %H:%M:%S') - datetime.strptime(data[str(message.from_user.id)]['last message'], '%Y-%m-%d %H:%M:%S')).seconds)}c")
                        else:
                            send_message(message,
                                         f"‚åö –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {10 - ((datetime.strptime(datetime.now().strftime('%Y-%m-%d %H:%M:%S'), '%Y-%m-%d %H:%M:%S') - datetime.strptime(data[str(message.from_user.id)]['last message'], '%Y-%m-%d %H:%M:%S')).seconds)}c\nüíé–° Premium –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —É–º–µ–Ω—å—à–µ–Ω–æ —Å 10—Å –¥–æ 5—Å, –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ /pay")
                    else:
                        data[str(message.from_user.id)]["last message"] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        send_message(message, f"‚åö –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —É –≤–∞—Å —á–∞—Å—Ç–æ –≤—ã–ª–∞–∑–∏—Ç –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


except Exception as e:
    bot.send_message(5438856320, f"‚¨õ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ, —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n\n{e}")
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

try:
    bot.polling(none_stop=True, timeout=50)
except Exception as e:
    bot = telebot.TeleBot("5992027379:AAFrfF4nSAEJc5Ttx_Noci8Zsf0S-WTVbzM")
    bot.send_message(5438856320, f"‚¨õ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ, —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n\n{e}")
    bot.polling(none_stop=False, timeout=50)